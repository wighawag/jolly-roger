{
  "name": "jolly-roger",
  "version": "0.0.1",
  "description": "Template to develop fully decentralised app and games",
  "private": true,
  "type": "module",
  "devDependencies": {
    "ask-env": "^0.0.1",
		"ldenv": "^0.3.10",
		"prettier": "^3.3.1",
		"sharp": "^0.33.4",
		"syncpack": "^12.3.2",
		"vitepress": "1.2.3",
		"zellij-launcher": "^0.0.1"
	},
	"pnpm": {
		"supportedArchitectures": {
			"os": [
				"linux"
			],
			"cpu": [
				"x64"
			]
		},
		"overrides": {
			"fuzd-cf-worker>named-logs": "npm:named-logs-for-servers@0.0.1",
			"fuzd-server>named-logs": "npm:named-logs-for-servers@0.0.1",
			"fuzd-common>named-logs": "npm:named-logs-for-servers@0.0.1",
			"fuzd-executor>named-logs": "npm:named-logs-for-servers@0.0.1",
			"fuzd-gateways>named-logs": "npm:named-logs-for-servers@0.0.1",
			"remote-account>named-logs": "npm:named-logs-for-servers@0.0.1",
			"fuzd-scheduler>named-logs": "npm:named-logs-for-servers@0.0.1",
			"fuzd-tlock-decrypter>named-logs": "npm:named-logs-for-servers@0.0.1",
			"bl@<0.9.5": ">=0.9.5",
			"jpeg-js@<0.4.4": ">=0.4.4",
			"bl@<1.2.3": ">=1.2.3",
			"semver@<4.3.2": ">=4.3.2",
			"jpeg-js@<0.4.0": ">=0.4.0",
			"@koa/cors@<5.0.0": ">=5.0.0",
			"minimist@<0.2.1": ">=0.2.1",
			"semver@<5.7.2": ">=5.7.2",
			"minimist@<0.2.4": ">=0.2.4",
			"tough-cookie@<4.1.3": ">=4.1.3",
			"browserify-sign@>=2.6.0 <=4.2.1": ">=4.2.2",
			"follow-redirects@<=1.15.5": ">=1.15.6",
			"phin@<3.7.1": ">=3.7.1"
		},
		"auditConfig": {
			"ignoreCves": [
				"CVE-2020-7661",
				"CVE-2023-28155"
			]
		}
  },
  "scripts": {
    "preinstall": "npx only-allow pnpm",
    "---------------------- INSTALL ----------------------": "",
    "boot": "npx change-name@0.3.1 --ask jolly-roger && pnpm i",
    "set-name": "npx change-name@0.3.1 --ask jolly-roger",
    "template-test": "pnpm --filter ./contracts local_node & pnpm run --filter ./contracts deploy localhost ~~ pnpm export -n localhost --ts ../indexer/src/contracts.ts,../web/src/data/contracts.ts ~~ && pnpm run --filter ./common build && pnpm --filter ./indexer build",
    "sync-deps": "syncpack fix-mismatches && pnpm -r format:fix",
    "update-deps": "pnpm update -r -i --latest && pnpm sync-deps",
    "---------------------- FORMAT ----------------------": "",
    "format": "prettier --write . && pnpm -r format",
    "format:check": "prettier --check . && pnpm -r format:check",
    "---------------------- INTERNAL ----------------------": "",
		"_contracts:deploy:watch": "pnpm --filter ./contracts deploy:watch $MODE ~~ pnpm run export -n $MODE --json ../helper-services/fuzd/contracts.json --ts ../indexer/src/contracts.ts,../web/src/data/contracts.ts ~~",
		"_contracts:deploy": "pnpm run --filter ./contracts deploy $MODE  ~~ pnpm run export -n $MODE --json ../helper-services/fuzd/contracts.json --ts ../indexer/src/contracts.ts,../web/src/data/contracts.ts ~~",
    "---------------------- UTILITIES ----------------------": "",
    "local_node": "ldenv pnpm --filter ./contracts local_node",
    "contracts:compile": "pnpm --filter ./contracts compile",
    "contracts:compile:watch": "pnpm --filter ./contracts compile:watch",
    "web:dev": "pnpm --filter ./web dev",
    "indexer:dev": "pnpm --filter ./indexer dev",
    "common:dev": "pnpm --filter ./common dev",
		"contracts:export": "ldenv -d localhost pnpm run --filter ./contracts export -n @@MODE --json ../helper-services/fuzd/contracts.json --ts ../indexer/src/contracts.ts,../web/src/data/contracts.ts @@",
    "contracts:test": "pnpm --filter ./contracts test",
    "contracts:execute": "pnpm --filter ./contracts execute",
    "contracts:docs": "ldenv -d localhost pnpm run --filter ./contracts docgen @@MODE -o ../docs/contracts",
    "indexer:build": "ldenv pnpm run contracts:export @@MODE ~~ pnpm run --filter ./common build ~~ pnpm run --filter ./indexer build ~~ @@",
		"indexer:index": "ldenv pnpm run indexer:build @@MODE ~~ pnpm --filter ./indexer index-to-file -n @@ETH_NODE_URI_:MODE,ETH_NODE_URI@:''@: -d src/contracts.ts -f ../web/static/indexed-states/@@MODE ~~ @@",
		"fuzd:dev": "pnpm --filter ./helper-services/fuzd dev",
		"sync:dev": "pnpm --filter ./helper-services/secp256k1-db dev",
		"missiv:dev": "pnpm --filter ./helper-services/missiv dev",
    "---------------------- DOCS ----------------------": "",
    "docs:dev": "pnpm contracts:docs && vitepress dev docs",
    "docs:build": "pnpm contracts:docs && vitepress build docs",
    "docs:preview": "vitepress preview docs",
    "---------------------- WEB USING EXISTING DEPLOYMENT ----------------------": "",
    "zellij-attach": "zellij --layout dev/zellij-attach.kdl a ${npm_package_name}-attach-$MODE || zellij --layout dev/zellij-attach.kdl -s ${npm_package_name}-attach-$MODE",
    "attach": "ldenv -d localhost pnpm run indexer:index @@MODE ~~ pnpm run zellij-attach ~~ @@",
		"---------------------- FULL AGAINST AN EXISTING NETWORK WITH LOCAL SERVICES ----------------------": "",
		"zellij-remote-chain": "rm helper-services/fuzd/contracts.json && zellij --layout dev/zellij-remote-chain.kdl a ${npm_package_name}-remote-chain-$MODE || zellij --layout dev/zellij-remote-chain.kdl -s ${npm_package_name}-remote-chain-$MODE",
		"remote-chain": "ldenv pnpm run zellij-remote-chain @@",
		"---------------------- FULL AGAINST AN EXISTING NETWORK + SERVICES ----------------------": "",
    "zellij-remote": "zellij --layout dev/zellij-remote.kdl a ${npm_package_name}-remote-$MODE || zellij --layout dev/zellij-remote.kdl -s ${npm_package_name}-remote-$MODE",
    "remote": "ldenv pnpm run zellij-remote @@",
    "---------------------- DEPLOY ----------------------": "",
    "build": "ldenv -d sepolia pnpm run indexer:index @@MODE ~~ pnpm run --filter ./web build ~~ @@",
    "serve": "pnpm --filter ./web serve",
    "contracts:deploy": "ldenv -d localhost pnpm _contracts:deploy @@",
    "contracts:deploy:prepare": "ldenv -d localhost ask-env -f contracts/.env.local ETH_NODE_URI_@@MODE MNEMONIC_@@MODE ETHERSCAN_API_KEY:?:ETHERSCAN_API_KEY @@",
    "contracts:deploy:watch": "ldenv -d localhost pnpm _contracts:deploy:watch @@",
    "contracts:verify": "pnpm --filter ./contracts verify",
    "---------------------- RUN FULL LOCAL SETUP ----------------------": "",
    "start:wezterm": "wezterm --config-file dev/wezterm.lua start $PWD",
    "stop": "zellij kill-session $npm_package_name",
		"start": "rm helper-services/fuzd/contracts.json; zellij-launcher --layout dev/zellij.kdl a $npm_package_name || zellij --layout dev/zellij.kdl -s $npm_package_name",
		"clean:start": "rm -Rf contracts/deployments/localhost && pnpm start"
  }
}
